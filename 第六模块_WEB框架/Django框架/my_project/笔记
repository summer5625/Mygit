一、创建Django项目步骤：
Django是MTV模式，与MVC优点区别，其中urls是相当于mvc模式中的控制器
    1、创建Django项目
        在命令行找到创建项目的位置，并进入
        进入文件夹后输入：django-admin.exe startproject 项目名称
        项目里面的manage.py使用与Django项目启动和APP创建的文件
        settings.py是相关的配置文件

    2、创建应用，一个项目里面可以有多个应用
        命令行进入创建项目的文件夹
        进入后输入：python manage.py startapp 应用名称
        在应用文件夹里重要的是models.py和view.py文件

    3、在项目文件夹下手动创建templates文件夹，用于存放html文件

    4、启动项目
        在命令行输入：python manage.py runserver  ip+端口
        如果runserver后面没有内容则默认的是本机的8000端口


二、用pycharm创建Django项目
    点击file选择new project就可以创建了
    同样启动项目只需要点击右上角开启按钮即可开启
    每次修改文件后，点击保存项目会自动重启

url路由控制器

三、静态文件配置
    静态文件主要是网页的css文件和js文件
    如果不给这些文件进行静态配置，则用户无法拿到css和js文件，网页也就没有了动态和样式
    配置静态文件方法如下：
    首先在项目里面新建一个static的文件夹，用于存放静态文件，这个文件夹名称可以随意取，但最好叫static
    然后进入setting文件，创建一个STATICFILES_DIRS的列表，用于存放静态文件位置的路径


四、路由控制之简单配置（路径---> 视图函数）
    1、导入模块
        在urls.py中导入re_path，用于正则匹配用户输入路径的
        在views.py中导入HttpResponse响应模块，用于渲染网页的

    2、在urls.py中使用正则进行路径的匹配，如果匹配字符中有几个匹配分组，则代表对应的视图函数中就应该有多少个分组匹配的参数

    3、在views.py中构建视图函数

    4、有名分组：即将匹配的每个分组命个名字，这样在views.py中调用视图函数时传参数就不用考虑顺序问题了


五、路由控制之分发
    当一个项目里面有多个应用时，需要对每个应用的功能和视图进行分发
    1、先在每个应用下面新建一个urls.py的文件，将需要配对的视图函数路径写到这个文件中
    2、在项目全局的urls.py文件中分发每个应用的路径，在全局的urls.py中先导入include模块，
    然后依次写下每个应用的路径，例如：re_path(r'^app01/', include('app01.urls'))
    代表分发给app01应用的控制器


六、路由控制之反向解析
反向解析是基于用于匹配的路径有时候是可变的，如果一个匹配的URL路径名称发生变化，那么使用这个匹配路径的url全部都要变化，
就造成了修起来十分麻烦，不方便后期维护，因此将url取个固定的别名，在调用次url时使用固定别名调用，这样在路径被修改时就不用修改使用该url的
匹配路径，就可以动态获得路径了
    1、在html中反向解析
        在使用的html文件的form表单中将提交信息的url地址修改：{% url url的固定名称 %}
        在urls.py文件中，为要设置固定名称的url添加name属性

    2、在python文件中使用反向解析
        首先在views.py文件中导入 reverse：from django.urls import reverse
        然后在urls.py文件中给需要起固订名称的url添加name属性
        在相应的视图函数中通过reverse('固定的url名称')调用url
        当起别名的url中有正则匹配的分组，则需要给reverse('固定的url名称',arg=(符合匹配分组的字符串,)

七、路由控制之名称空间
    在每个项目中有多个应用，可能一个名称在多个应用中都有，这样就重复了，那么再用各个名称进行调用时就会出现冲突
    解决办法：
        1、在全局的urls中，在分发路由时给每个应用设置一个名称空间：include(('app01.urls', '设置的名称空间名称')))
        2、然后在每个应用的views.py中找到对应的视图函数，修改调用的固定别名：reverse('设置的名称空间名称:index')

八、2.0版本的url控制器的path方法
    1、内部固定的内置转换器（5中内置转换器）
        上面用到的url中的re_path方法时django1.0版本中的方法
        在使用re_path方法时传到里面的参数都是字符串格式，要想得到其他格式的参数需要自己手动转换
        但是在使用path方法时可以在内部直接得到想要的格式，因此在匹配路径时需要在urls.py文件中写匹配路径时：<要匹配的数据格式类型：匹配的数据名称>
        在views.py中对应的视图函数中，传入参数必须是urls.py中匹配变量的名称，否则会报错

    2、内置转换器
        首先在应用中新建一个存放自定义换器py文件，在文件中新建一个自定义转化器的类
        在urls.py中导入新建的自定义转换器的类，然后在urls.py中注册转换器


视图层








